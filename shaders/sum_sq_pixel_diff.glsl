#version 330
out float color;
in vec2 uv_to_frag; // from vertex shader
uniform sampler2D texture_to_draw;
uniform sampler2D texture_base;
uniform float uv_base_x;
uniform float uv_base_y;

#define NUM_OFFSETS 81
const vec2 offsets[NUM_OFFSETS] = vec2[](
       vec2(-4.0/1024, -4.0/1024),
       vec2(-4.0/1024, -3.0/1024),
       vec2(-4.0/1024, -2.0/1024),
       vec2(-4.0/1024, -1.0/1024),
       vec2(-4.0/1024,  0.0/1024),
       vec2(-4.0/1024,  1.0/1024),
       vec2(-4.0/1024,  2.0/1024),
       vec2(-4.0/1024,  3.0/1024),
       vec2(-4.0/1024,  4.0/1024),

       vec2(-3.0/1024, -4.0/1024),
       vec2(-3.0/1024, -3.0/1024),
       vec2(-3.0/1024, -2.0/1024),
       vec2(-3.0/1024, -1.0/1024),
       vec2(-3.0/1024,  0.0/1024),
       vec2(-3.0/1024,  1.0/1024),
       vec2(-3.0/1024,  2.0/1024),
       vec2(-3.0/1024,  3.0/1024),
       vec2(-3.0/1024,  4.0/1024),

       vec2(-2.0/1024, -4.0/1024),
       vec2(-2.0/1024, -3.0/1024),
       vec2(-2.0/1024, -2.0/1024),
       vec2(-2.0/1024, -1.0/1024),
       vec2(-2.0/1024,  0.0/1024),
       vec2(-2.0/1024,  1.0/1024),
       vec2(-2.0/1024,  2.0/1024),
       vec2(-2.0/1024,  3.0/1024),
       vec2(-2.0/1024,  4.0/1024),

       vec2(-1.0/1024, -4.0/1024),
       vec2(-1.0/1024, -3.0/1024),
       vec2(-1.0/1024, -2.0/1024),
       vec2(-1.0/1024, -1.0/1024),
       vec2(-1.0/1024,  0.0/1024),
       vec2(-1.0/1024,  1.0/1024),
       vec2(-1.0/1024,  2.0/1024),
       vec2(-1.0/1024,  3.0/1024),
       vec2(-1.0/1024,  4.0/1024),

       vec2( 0.0/1024, -4.0/1024),
       vec2( 0.0/1024, -3.0/1024),
       vec2( 0.0/1024, -2.0/1024),
       vec2( 0.0/1024, -1.0/1024),
       vec2( 0.0/1024,  0.0/1024),
       vec2( 0.0/1024,  1.0/1024),
       vec2( 0.0/1024,  2.0/1024),
       vec2( 0.0/1024,  3.0/1024),
       vec2( 0.0/1024,  4.0/1024),

       vec2( 1.0/1024, -4.0/1024),
       vec2( 1.0/1024, -3.0/1024),
       vec2( 1.0/1024, -2.0/1024),
       vec2( 1.0/1024, -1.0/1024),
       vec2( 1.0/1024,  0.0/1024),
       vec2( 1.0/1024,  1.0/1024),
       vec2( 1.0/1024,  2.0/1024),
       vec2( 1.0/1024,  3.0/1024),
       vec2( 1.0/1024,  4.0/1024),

       vec2( 2.0/1024, -4.0/1024),
       vec2( 2.0/1024, -3.0/1024),
       vec2( 2.0/1024, -2.0/1024),
       vec2( 2.0/1024, -1.0/1024),
       vec2( 2.0/1024,  0.0/1024),
       vec2( 2.0/1024,  1.0/1024),
       vec2( 2.0/1024,  2.0/1024),
       vec2( 2.0/1024,  3.0/1024),
       vec2( 2.0/1024,  4.0/1024),

       vec2( 3.0/1024, -4.0/1024),
       vec2( 3.0/1024, -3.0/1024),
       vec2( 3.0/1024, -2.0/1024),
       vec2( 3.0/1024, -1.0/1024),
       vec2( 3.0/1024,  0.0/1024),
       vec2( 3.0/1024,  1.0/1024),
       vec2( 3.0/1024,  2.0/1024),
       vec2( 3.0/1024,  3.0/1024),
       vec2( 3.0/1024,  4.0/1024),

       vec2( 4.0/1024, -4.0/1024),
       vec2( 4.0/1024, -3.0/1024),
       vec2( 4.0/1024, -2.0/1024),
       vec2( 4.0/1024, -1.0/1024),
       vec2( 4.0/1024,  0.0/1024),
       vec2( 4.0/1024,  1.0/1024),
       vec2( 4.0/1024,  2.0/1024),
       vec2( 4.0/1024,  3.0/1024),
       vec2( 4.0/1024,  4.0/1024));

void main(){
     float sum;
     float[NUM_OFFSETS] diffs;
     for (int i=0; i<NUM_OFFSETS; i++) {
          diffs[i] = ( texture(texture_to_draw, vec2(uv_to_frag.x+offsets[i].x, uv_to_frag.y+offsets[i].y)).r -
                       texture(texture_base, vec2(uv_base_x+offsets[i].x, uv_base_y+offsets[i].y)).r );
     }
     sum = 0.0;
     for (int i=0; i<NUM_OFFSETS; i++) {
          sum += diffs[i]*diffs[i];
     }
     //color = 1.0 - sqrt(sum/NUM_OFFSETS);
     color = 1.0 - sqrt(sum/NUM_OFFSETS);
     color = color * color * color;
}

